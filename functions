#!/usr/bin/env bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common-functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions"
source "$PLUGIN_AVAILABLE_PATH/config/functions"
if [[ -f "$PLUGIN_AVAILABLE_PATH/docker-options/functions" ]]; then
  source "$PLUGIN_AVAILABLE_PATH/docker-options/functions"
fi

service_ca_export() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local DATABASE_NAME="$(get_database_name "$SERVICE")"
  local DEST_PATH="$2"
  local OPT="$3"

  "$DOCKER_BIN" cp "$SERVICE_NAME:/cockroach/certs/ca.key" "$DEST_PATH/ca.key"
  "$DOCKER_BIN" cp "$SERVICE_NAME:/cockroach/certs/ca.crt" "$DEST_PATH/ca.crt"
  if [[ "$OPT" != "--force-copy" ]]; then
    "$DOCKER_BIN" exec "$SERVICE_NAME" rm -rf /cockroach/certs/ca.key
    dokku_log_verbose_quiet "CA certificates transferred from service $SERVICE"
  else
    dokku_log_verbose_quiet "CA certificates copied from service $SERVICE"
  fi
}

service_ca_import() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local DATABASE_NAME="$(get_database_name "$SERVICE")"
  local SRC_PATH="$2"

  "$DOCKER_BIN" container exec rm -rf /cockroach/certs/*
  "$DOCKER_BIN" cp "$SRC_PATH/ca.key" "$SERVICE_NAME:/cockroach/certs/ca.key"
  dokku_log_verbose_quiet "CA private key certificate imported to service $SERVICE"
  "$DOCKER_BIN" cp "$SRC_PATH/ca.crt" "$SERVICE_NAME:/cockroach/certs/ca.crt"
  dokku_log_verbose_quiet "CA public key certificate imported to service $SERVICE"

  dokku_log_verbose_quiet "Regenerating node certificates for service $SERVICE"
  "$DOCKER_BIN" container exec "$SERVICE_NAME" bash -s <"$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/scripts/create_certs.sh"

}

service_connect() {
  local SERVICE="$1" && shift 1
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local DATABASE_NAME="$(get_database_name "$SERVICE")"
  local SERVICE_TTY_OPTS
  has_tty && SERVICE_TTY_OPTS="-t"

  #"$DOCKER_BIN" container exec --env=LANG=C.UTF-8 --env=LC_ALL=C.UTF-8 -i $SERVICE_TTY_OPTS "$SERVICE_NAME" psql -v ON_ERROR_STOP=1 -h localhost -U postgres "$DATABASE_NAME"
  "$DOCKER_BIN" container exec --env=LANG=C.UTF-8 --env=LC_ALL=C.UTF-8 -i $SERVICE_TTY_OPTS "$SERVICE_NAME" cockroach sql --set=errexit=true --host=127.0.0.1 --certs-dir=/cockroach/certs -u root -d "$DATABASE_NAME" "$@"
}

service_create() {
  local SERVICE="$1"
  is_valid_service_name "$SERVICE" || dokku_log_fail "Please specify a valid name for the service. Valid characters are: [A-Za-z0-9_]+"
  [[ -z "$SERVICE" ]] && dokku_log_fail "Please specify a valid name for the service"
  [[ ! -d "$PLUGIN_DATA_ROOT/$SERVICE" ]] || dokku_log_fail "$PLUGIN_SERVICE service $SERVICE already exists"
  SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  LINKS_FILE="$SERVICE_ROOT/LINKS"

  service_parse_args "${@:2}"

  if ! service_image_exists "$SERVICE"; then
    if [[ "$PLUGIN_DISABLE_PULL" == "true" ]]; then
      dokku_log_warn "${PLUGIN_DISABLE_PULL_VARIABLE} environment variable detected. Not running pull command." 1>&2
      dokku_log_warn "   docker image pull ${IMAGE}" 1>&2
      dokku_log_warn "$PLUGIN_SERVICE service creation failed"
      exit 1
    fi
    "$DOCKER_BIN" image pull "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" || dokku_log_fail "$PLUGIN_SERVICE image $PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION pull failed"
  fi

  plugn trigger service-action pre-create "$PLUGIN_COMMAND_PREFIX" "$SERVICE"
  mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
  mkdir -p "$SERVICE_ROOT/data" || dokku_log_fail "Unable to create service data directory"
  touch "$LINKS_FILE"

  PASSWORD=$(openssl rand -hex 16)
  if [[ -n "$SERVICE_PASSWORD" ]]; then
    PASSWORD="$SERVICE_PASSWORD"
    dokku_log_warn "Specified password may not be as secure as the auto-generated password"
  fi
  echo "$PASSWORD" >"$SERVICE_ROOT/PASSWORD"
  chmod 640 "$SERVICE_ROOT/PASSWORD"

  service_commit_config "$SERVICE"
  write_database_name "$SERVICE"
  plugn trigger service-action post-create "$PLUGIN_COMMAND_PREFIX" "$SERVICE"
  service_create_container "$SERVICE"
  plugn trigger service-action post-create-complete "$PLUGIN_COMMAND_PREFIX" "$SERVICE"
}

service_create_container() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_HOST_ROOT="$PLUGIN_DATA_HOST_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local PASSWORD="$(service_password "$SERVICE")"
  local DATABASE_NAME="$(get_database_name "$SERVICE")"
  local PREVIOUS_ID
  local ADVERT_ADDR="$2"
  [[ -z "$ADVERT_ADDR" ]] && ADVERT_ADDR=127.0.0.1 && dokku_log_warn "Public advertised address not set, fallback to 127.0.0.1. Other nodes may fail connecting to cluster."

  service_set_advert_address $SERVICE $ADVERT_ADDR
  #echo "$ADVERT_ADDR" > "$SERVICE_ROOT/ADVERT_ADDR"


  if [[ -f "$SERVICE_ROOT/CONFIG_OPTIONS" ]]; then
    export CONFIG_OPTIONS="$(cat "$SERVICE_ROOT/CONFIG_OPTIONS")"
  fi

  local network_alias="$(service_dns_hostname "$SERVICE")"

  rm -f "$SERVICE_ROOT/ID"
  declare -a DOCKER_ARGS
  DOCKER_ARGS=()
  DOCKER_ARGS+=("--cidfile=$SERVICE_ROOT/ID")
  DOCKER_ARGS+=("--env-file=$SERVICE_ROOT/ENV")
  DOCKER_ARGS+=("--env=COCKROACH_USER=dokku")
  DOCKER_ARGS+=("--env=COCKROACH_PASSWORD=$PASSWORD")
  DOCKER_ARGS+=("--hostname=$SERVICE_NAME")
  DOCKER_ARGS+=("--label=dokku.service=$PLUGIN_COMMAND_PREFIX")
  DOCKER_ARGS+=("--label=dokku=service")
  DOCKER_ARGS+=("--name=$SERVICE_NAME")
  DOCKER_ARGS+=("--restart=always")
  DOCKER_ARGS+=("--volume=$SERVICE_HOST_ROOT/data:/cockroach/cockroach-data")
  DOCKER_ARGS+=("--volume=$SERVICE_HOST_ROOT/cockroach-certs:/cockroach/certs")
  DOCKER_ARGS+=("--volume=$SERVICE_HOST_ROOT/haproxy/data:/cockroach/haproxy")

  declare -a LINK_CONTAINER_DOCKER_ARGS
  LINK_CONTAINER_DOCKER_ARGS=()
  LINK_CONTAINER_DOCKER_ARGS+=("--rm")
  LINK_CONTAINER_DOCKER_ARGS+=("--link")
  LINK_CONTAINER_DOCKER_ARGS+=("$SERVICE_NAME:$network_alias")

  [[ -f "$SERVICE_ROOT/SERVICE_MEMORY" ]] && SERVICE_MEMORY="$(cat "$SERVICE_ROOT/SERVICE_MEMORY")"
  if [[ -n "$SERVICE_MEMORY" ]]; then
    DOCKER_ARGS+=("--memory=${SERVICE_MEMORY}m")
  fi

  [[ -f "$SERVICE_ROOT/SHM_SIZE" ]] && SERVICE_SHM_SIZE="$(cat "$SERVICE_ROOT/SHM_SIZE")"
  if [[ -n "$SERVICE_SHM_SIZE" ]]; then
    DOCKER_ARGS+=("--shm-size=${SERVICE_SHM_SIZE}")
  fi

  [[ -f "$SERVICE_ROOT/IMAGE" ]] && PLUGIN_IMAGE="$(cat "$SERVICE_ROOT/IMAGE")"
  [[ -f "$SERVICE_ROOT/IMAGE_VERSION" ]] && PLUGIN_IMAGE_VERSION="$(cat "$SERVICE_ROOT/IMAGE_VERSION")"

  local network="$(fn-plugin-property-get "$PLUGIN_COMMAND_PREFIX" "$SERVICE" "initial-network")"
  if [[ -n "$network" ]]; then
    DOCKER_ARGS+=("--network=${network}")
    DOCKER_ARGS+=("--network-alias=${network_alias}")
    LINK_CONTAINER_DOCKER_ARGS+=("--network=${network}")
  fi

  #local COCROACH
  local COCKROACH_ARGS="start --certs-dir=/cockroach/certs --advertise-addr=$ADVERT_ADDR --join=127.0.0.1"
  # "start-single-node"
  #--accept-sql-without-tls"

  # shellcheck disable=SC2086
  suppress_output "$DOCKER_BIN" container create "${DOCKER_ARGS[@]}" "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" $CONFIG_OPTIONS $COCKROACH_ARGS

  if [[ -n "$(fn-plugin-property-get "$PLUGIN_COMMAND_PREFIX" "$SERVICE" "post-create-network")" ]]; then
    dokku_log_verbose_quiet "Connecting to networks after container create"
    while read -r line || [[ -n "$line" ]]; do
      dokku_log_verbose_quiet "- $line"
      "$DOCKER_BIN" network connect --alias "$network_alias" "$line" "$SERVICE_NAME"
    done < <(fn-plugin-property-get "$PLUGIN_COMMAND_PREFIX" "$SERVICE" "post-create-network" | tr "," "\n")
  fi

  suppress_output "$DOCKER_BIN" container start "$(cat "$SERVICE_ROOT/ID")"
  service_port_reconcile_status "$SERVICE"

  if [[ -n "$(fn-plugin-property-get "$PLUGIN_COMMAND_PREFIX" "$SERVICE" "post-start-network")" ]]; then
    dokku_log_verbose_quiet "Connecting to networks after container start"
    while read -r line || [[ -n "$line" ]]; do
      dokku_log_verbose_quiet "- $line"
      "$DOCKER_BIN" network connect --alias "$network_alias" "$line" "$SERVICE_NAME"
    done < <(fn-plugin-property-get "$PLUGIN_COMMAND_PREFIX" "$SERVICE" "post-start-network" | tr "," "\n")
  fi

  dokku_log_verbose_quiet "Adding certificates"
  "$DOCKER_BIN" container run --rm -i -v "$SERVICE_HOST_ROOT/cockroach-certs:/cockroach/certs" "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" bash -s <"$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/scripts/create_certs.sh"
  # &>/dev/null

  dokku_log_verbose_quiet "Setting up 'dokku' user"
  "$DOCKER_BIN" container run --rm -i -v "$SERVICE_HOST_ROOT/cockroach-certs:/cockroach/certs" -v "$SERVICE_HOST_ROOT/data:/cockroach/cockroach-data" "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" bash -s <"$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/scripts/setup_node_user.sh"

  dokku_log_verbose_quiet "Creating container database"
  # "$DOCKER_BIN" container exec "$SERVICE_NAME" su - postgres -c "createdb -E utf8 $DATABASE_NAME" 2>/dev/null || dokku_log_verbose_quiet 'Already exists'
  #"$DOCKER_BIN" container --rm -i -v "$SERVICE_NAME" cockroach sql --certs-dir=/cockroach/certs --host=127.0.0.1 --execute "CREATE DATABASE $DATABASE_NAME;"
  # TODO: set up secure multi node
  #--insecure

  dokku_log_verbose_quiet "Waiting for container to be ready"
  #if ! suppress_output "$DOCKER_BIN" container run "${LINK_CONTAINER_DOCKER_ARGS[@]}" "$PLUGIN_WAIT_IMAGE" -c "$network_alias:$PLUGIN_DATASTORE_WAIT_PORT"; then
    dokku_log_info2_quiet "Start of $SERVICE container output"
  #  dokku_container_log_verbose_quiet "$SERVICE_NAME"
  #  dokku_log_info2_quiet "End of $SERVICE container output"
  #  return 1
  #fi

  dokku_log_verbose_quiet "Securing connection to database"
  #service_pause "$SERVICE" >/dev/null
  #"$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/scripts/create_ssl_certs.sh" "$SERVICE_ROOT" &>/dev/null
  # -v "$SERVICE_HOST_ROOT/certs:/dokku-cockroach-certs" 
  #"$DOCKER_BIN" container run --rm -i -v "$SERVICE_HOST_ROOT/data:/cockroach/cockroach-data" "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" bash -s <"$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/scripts/enable_ssl.sh" &>/dev/null
  #rm -rf "$SERVICE_HOST_ROOT/certs"

  
  suppress_output "$DOCKER_BIN" container start "$(cat "$SERVICE_ROOT/ID")"
 dokku_container_log_verbose_quiet "$SERVICE_NAME"

  service_port_reconcile_status "$SERVICE"
  dokku_log_verbose_quiet "Initializing Cockroach cluster"
  "$DOCKER_BIN" container exec "$SERVICE_NAME" cockroach init --certs-dir=/cockroach/certs --host=127.0.0.1

  "$DOCKER_BIN" container exec -i "$SERVICE_NAME" bash -s -- "$DATABASE_NAME" <"$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/scripts/setup_admin_user.sh"  
  "$DOCKER_BIN" container exec -i "$SERVICE_NAME" cockroach sql --certs-dir=/cockroach/certs --host=127.0.0.1 --execute "CREATE DATABASE $DATABASE_NAME;"
  
  dokku_log_info2 "$PLUGIN_SERVICE container created: $SERVICE"
  service_info "$SERVICE"
}

service_haproxy_destroy() {
  local SERVICE="$1"
  local FORCE_FLAG="$2"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE/haproxy"
  local LINKS_FILE="$SERVICE_ROOT/LINKS"
  local SERVICE_HOST_ROOT="$PLUGIN_DATA_HOST_ROOT/$SERVICE/haproxy"
  local SERVICE_NAME="$(get_service_name "${SERVICE}-haproxy")"

  [[ -s "$LINKS_FILE" ]] && dokku_log_fail "Cannot delete linked service"

  if [[ "$FORCE_FLAG" == "force" ]] || [[ "$FORCE_FLAG" == "-f" ]] || [[ "$FORCE_FLAG" == "--force" ]]; then
    local DOKKU_APPS_FORCE_DELETE=1
  fi
  if [[ -z "$DOKKU_APPS_FORCE_DELETE" ]]; then
    dokku_log_warn "WARNING: Potentially Destructive Action"
    dokku_log_warn "This command will destroy $SERVICE $PLUGIN_SERVICE haproxy service."
    dokku_log_warn "To proceed, type \"$SERVICE\""
    echo ""

    read -rp "> " service_name
    if [[ "$service_name" != "$SERVICE" ]]; then
      dokku_log_warn "Confirmation did not match $SERVICE. Aborted."
      exit 1
    fi
  fi

  dokku_log_info2_quiet "Deleting $SERVICE haproxy load balancer"
  #plugn trigger service-action pre-delete "$PLUGIN_COMMAND_PREFIX" "$SERVICE"
  #service_backup_unschedule "$SERVICE"
  service_container_rm "${SERVICE}-haproxy"

  dokku_log_verbose_quiet "Removing data"
  "$DOCKER_BIN" container run --rm -v "$SERVICE_HOST_ROOT:/haproxy" "$PLUGIN_BUSYBOX_IMAGE" chmod 777 -R /haproxy
  rm -rf "$SERVICE_ROOT"
  mkdir -p "$SERVICE_ROOT/data" # Keep folder to avoid errors

  #fn-plugin-property-destroy "$PLUGIN_COMMAND_PREFIX" "$SERVICE"

  #plugn trigger service-action post-delete "$PLUGIN_COMMAND_PREFIX" "$SERVICE"
  dokku_log_info2 "$PLUGIN_SERVICE haproxy container deleted: $SERVICE"
}

service_haproxy_start() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE/haproxy"
  local SERVICE_HOST_ROOT="$PLUGIN_DATA_HOST_ROOT/$SERVICE/haproxy"
  local SERVICE_NAME="$(get_service_name "${SERVICE}-haproxy")"

  local CR_SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local CR_SERVICE_NAME="$(get_service_name "$SERVICE")"
  local DATABASE_NAME="$(get_database_name "$SERVICE")"
  #local SRC_PATH="$2"

  local ADVERT_ADDR="$(get_advert_address "$SERVICE")"
  local network_alias="$(service_dns_hostname "$SERVICE")"
  local CR_LINK_ADDR="$network_alias"

  #touch "$SERVICE_ROOT/ID"
  #touch "$SERVICE_ROOT/ENV"

  rm -f "$SERVICE_ROOT/ID"
  declare -a DOCKER_ARGS
  DOCKER_ARGS=()
  DOCKER_ARGS+=("--cidfile=$SERVICE_ROOT/ID")
#  DOCKER_ARGS+=("--env-file=$SERVICE_ROOT/ENV")
  DOCKER_ARGS+=("--hostname=$SERVICE_NAME")
  DOCKER_ARGS+=("--label=dokku.service=$PLUGIN_COMMAND_PREFIX")
  DOCKER_ARGS+=("--label=dokku=service")
  DOCKER_ARGS+=("--name=$SERVICE_NAME")
  DOCKER_ARGS+=("--restart=always")
  DOCKER_ARGS+=("--volume=$SERVICE_HOST_ROOT/data:/usr/local/etc/haproxy:ro")
  DOCKER_ARGS+=("--link=$CR_SERVICE_NAME:$network_alias")

  #declare -a LINK_CONTAINER_DOCKER_ARGS
  #LINK_CONTAINER_DOCKER_ARGS=()
  #LINK_CONTAINER_DOCKER_ARGS+=("--rm")
  #LINK_CONTAINER_DOCKER_ARGS+=("--link")
  #LINK_CONTAINER_DOCKER_ARGS+=("$SERVICE_NAME:$network_alias")

  dokku_log_verbose_quiet "Generating CockroachDB haproxy config"
  "$DOCKER_BIN" container exec -i "$CR_SERVICE_NAME" cockroach gen haproxy --certs-dir=/cockroach/certs --host=127.0.0.1 --out /cockroach/haproxy/haproxy.cfg

#  "$DOCKER_BIN" container exec -i "$CR_SERVICE_NAME" cat /cockroach/haproxy/haproxy.cfg
  "$DOCKER_BIN" container exec -i "$CR_SERVICE_NAME" sed -i "/server cockroach1/ s|$ADVERT_ADDR|$CR_LINK_ADDR|g" /cockroach/haproxy/haproxy.cfg
  "$DOCKER_BIN" container exec -i "$CR_SERVICE_NAME" cat /cockroach/haproxy/haproxy.cfg

  dokku_log_verbose_quiet "Creating CockroachDB haproxy load balancer"
# suppress_output 
  "$DOCKER_BIN" container create "${DOCKER_ARGS[@]}" "$CR_HAPROXY_IMAGE:$CR_HAPROXY_IMAGE_VERSION"

  dokku_log_verbose_quiet "Starting haproxy load balancer"
  #suppress_output 
  "$DOCKER_BIN" container start "$(cat "$SERVICE_ROOT/ID")"

  dokku_log_info2 "$PLUGIN_SERVICE container created: $SERVICE"
  service_info "$SERVICE"

}

service_export() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local DATABASE_NAME="$(get_database_name "$SERVICE")"
  local PASSWORD="$(service_password "$SERVICE")"

  [[ -n $SSH_TTY ]] && stty -opost
  # TODO: Set up backup export
  local COCKROACH_USER=root
  "$DOCKER_BIN" container exec "$SERVICE_NAME" cockroach sql --certs-dir=/cockroach/certs --host=127.0.0.1 --execute "BACKUP DATABASE $DATABASE_NAME INTO 'userfile://defaultdb.public.userfiles_$COCKROACH_USER/$DATABASE_NAME' AS OF SYSTEM TIME '-10s';" > /dev/null
  "$DOCKER_BIN" container exec -i "$SERVICE_NAME" mkdir -p "/dokku-tmp" > /dev/null

  # "$DATABASE_NAME"
  "$DOCKER_BIN" container exec -i -w "/dokku-tmp" "$SERVICE_NAME" cockroach userfile get --certs-dir=/cockroach/certs --host=127.0.0.1 "userfile://defaultdb.public.userfiles_$COCKROACH_USER/$DATABASE_NAME" > /dev/null
  "$DOCKER_BIN" container exec -i -w "/dokku-tmp" "$SERVICE_NAME" tar -cf - "$DATABASE_NAME" 2>/dev/null
  "$DOCKER_BIN" container exec -i "$SERVICE_NAME" rm -rf "/dokku-tmp/$DATABASE_NAME" > /dev/null
  "$DOCKER_BIN" container exec "$SERVICE_NAME" cockroach userfile delete --certs-dir=/cockroach/certs --host=127.0.0.1 "userfile://defaultdb.public.userfiles_$COCKROACH_USER/$DATABASE_NAME" > /dev/null
  # "$DOCKER_BIN" container exec "$SERVICE_NAME" env PGPASSWORD="$PASSWORD" pg_dump -Fc --no-acl --no-owner -h localhost -U postgres -w "$DATABASE_NAME"
  status=$?
  [[ -n $SSH_TTY ]] && stty opost
  exit $status
}

service_import() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_HOST_ROOT="$PLUGIN_DATA_HOST_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local DATABASE_NAME="$(get_database_name "$SERVICE")"
  local PASSWORD="$(service_password "$SERVICE")"

  if [[ -t 0 ]]; then
    dokku_log_fail "No data provided on stdin."
  fi
  #mkdir -p /tmp/cockroach/cockroach-data/extern/backup
  mkdir -p "$SERVICE_ROOT/extern/backup/tmp"
  #tee /cockroach/cockroach-data/extern/backup/$DATABASE_NAME.tar
  #tar -xvf /cockroach/cockroach-data/extern/backup/$DATABASE_NAME.tar -C /cockroach/cockroach-data/extern/backup/$DATABASE_NAME
  #rm -rf /cockroach/cockroach-data/extern/backup/$DATABASE_NAME.tar
  tar -xvf - -C "$SERVICE_ROOT/extern/backup/tmp"
  "$DOCKER_BIN" container exec -i "$SERVICE_NAME" mkdir -p /cockroach/cockroach-data/extern/backup/
  "$DOCKER_BIN" cp "$SERVICE_ROOT/extern/backup/tmp/$DATABASE_NAME/." "${SERVICE_NAME}:/cockroach/cockroach-data/extern/backup/"

  #"$DOCKER_BIN" container exec -i "$SERVICE_NAME" tee /cockroach/cockroach-data/extern/backup/$DATABASE_NAME < tar -xvf -
  "$DOCKER_BIN" container exec "$SERVICE_NAME" cockroach sql --certs-dir=/cockroach/certs --host=127.0.0.1 --execute "show backups in 'nodelocal://1/backup';"
  "$DOCKER_BIN" container exec "$SERVICE_NAME" cockroach sql --certs-dir=/cockroach/certs --host=127.0.0.1 --execute "RESTORE DATABASE $DATABASE_NAME FROM LATEST IN 'nodelocal://1/backup' with skip_localities_check;"
  rm -rf "$SERVICE_ROOT/extern/backup/tmp"
  #"$DOCKER_BIN" container exec -i "$SERVICE_NAME" env PGPASSWORD="$PASSWORD" pg_restore -h localhost -cO --if-exists -d "$DATABASE_NAME" -U postgres -w
}

service_start() {
  local SERVICE="$1"
  local QUIET="$2"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local ID=$("$DOCKER_BIN" container ps -aq --no-trunc --filter "status=running" --filter "name=^/$SERVICE_NAME$") || true
  if [[ -n $ID ]]; then
    [[ -z $QUIET ]] && dokku_log_warn "Service is already started"
    if [[ ! -f "$SERVICE_ROOT/ID" ]] || [[ "$(cat "$SERVICE_ROOT/ID")" != "$ID" ]]; then
      [[ -z $QUIET ]] && dokku_log_warn "Updating local container ID"
      echo "$ID" >"$SERVICE_ROOT/ID"
    fi
    return 0
  fi

  dokku_log_info2_quiet "Starting container"
  local PREVIOUS_ID=$("$DOCKER_BIN" container ps -aq --no-trunc --filter "status=exited" --filter "name=^/$SERVICE_NAME$") || true
  local PASSWORD="$(service_password "$SERVICE")"

  if [[ -n $PREVIOUS_ID ]]; then
    "$DOCKER_BIN" container start "$PREVIOUS_ID" >/dev/null
    service_port_reconcile_status "$SERVICE"
    dokku_log_info2 "Container started"
  elif service_image_exists "$SERVICE" && [[ -n "$PASSWORD" ]]; then
    service_create_container "$SERVICE"
  else
    if ! service_image_exists "$SERVICE"; then
      [[ -f "$SERVICE_ROOT/IMAGE" ]] && PLUGIN_IMAGE="$(cat "$SERVICE_ROOT/IMAGE")"
      [[ -f "$SERVICE_ROOT/IMAGE_VERSION" ]] && PLUGIN_IMAGE_VERSION="$(cat "$SERVICE_ROOT/IMAGE_VERSION")"
      dokku_log_verbose_quiet "Missing image $PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION for $SERVICE"
    else
      dokku_log_verbose_quiet "Neither container nor valid configuration exists for $SERVICE"
    fi
  fi
}

service_url() {
  local SERVICE="$1"
  local SERVICE_DNS_HOSTNAME="$(service_dns_hostname "$SERVICE")"
  local DATABASE_NAME="$(get_database_name "$SERVICE")"
  local PASSWORD="$(service_password "$SERVICE")"
  echo "$PLUGIN_SCHEME://postgres:$PASSWORD@$SERVICE_DNS_HOSTNAME:${PLUGIN_DATASTORE_PORTS[0]}/$DATABASE_NAME"
}
